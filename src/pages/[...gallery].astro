---
import Layout from '@/layouts/Layout.astro';
import Gallery from '@/components/Gallery.vue';
import type {
  CloudinaryImage,
  CloudinaryListResponse,
} from '@/types/CloudinaryTypes';

export const prerender = true;

export const getStaticPaths = async () => {
  return [
    { params: { gallery: 'gallery/camp-cabin/camp-cabin' } },
    { params: { gallery: 'gallery/camp-cabin/hunting-groups' } },
    { params: { gallery: 'gallery/camp-cabin/fishing-groups' } },
    { params: { gallery: 'gallery/camp-cabin/scenic' } },
    { params: { gallery: 'gallery/fishing/bass' } },
    { params: { gallery: 'gallery/fishing/carp' } },
    { params: { gallery: 'gallery/fishing/catfish' } },
    { params: { gallery: 'gallery/fishing/florida-studio' } },
    { params: { gallery: 'gallery/fishing/giant-sea-bass' } },
    { params: { gallery: 'gallery/fishing/halibut' } },
    { params: { gallery: 'gallery/fishing/other-fish' } },
    { params: { gallery: 'gallery/fishing/pike-muskie' } },
    { params: { gallery: 'gallery/fishing/stringers' } },
    { params: { gallery: 'gallery/fishing/sturgeon' } },
    { params: { gallery: 'gallery/fishing/tarpon' } },
    { params: { gallery: 'gallery/fishing/trout-salmon' } },
    { params: { gallery: 'gallery/fishing/women-fishing' } },
    { params: { gallery: 'gallery/fishing/young-fishermen' } },
    { params: { gallery: 'gallery/hunting/big-game/alligators' } },
    { params: { gallery: 'gallery/hunting/big-game/bears' } },
    { params: { gallery: 'gallery/hunting/big-game/cats' } },
    { params: { gallery: 'gallery/hunting/big-game/deer' } },
    { params: { gallery: 'gallery/hunting/big-game/moose-sheep-etc' } },
    { params: { gallery: 'gallery/hunting/big-game/wolves-coyotes' } },
    { params: { gallery: 'gallery/hunting/birds/ducks' } },
    { params: { gallery: 'gallery/hunting/birds/geese' } },
    { params: { gallery: 'gallery/hunting/birds/upland-game-birds' } },
    { params: { gallery: 'gallery/hunting/birds/other-birds' } },
    { params: { gallery: 'gallery/hunting/huntin-gals' } },
    { params: { gallery: 'gallery/hunting/portraits' } },
    { params: { gallery: 'gallery/hunting/small-game/rabbits' } },
    { params: { gallery: 'gallery/hunting/small-game/rabbit-round-ups' } },
    { params: { gallery: 'gallery/hunting/small-game/squirrels-skunks-etc' } },
    { params: { gallery: 'gallery/hunting/small-game/frogs-snakes-etc' } },
    { params: { gallery: 'gallery/hunting/small-game/foxes' } },
    { params: { gallery: 'gallery/hunting/young-hunters' } },
    { params: { gallery: 'gallery/hunting/huntin-dogs' } },
    { params: { gallery: 'gallery/tall-tales/fakes' } },
    { params: { gallery: 'gallery/tall-tales/fishing' } },
    { params: { gallery: 'gallery/tall-tales/hunting' } },
  ];
};

const { gallery } = Astro.params;

const getImagesFromCloudinary = async (gallery: string, size: number) => {
  const listName =
    gallery.replace('gallery/', '').replaceAll('/', '_') + '_' + size;
  const imagesJson = await fetch(
    `https://res.cloudinary.com/all-about-erik/image/list/${listName}.json`
  );
  if (!imagesJson.ok) {
    console.error('Failed to fetch images from Cloudinary', gallery, size);
    return { resources: [] };
  }
  const images = (await imagesJson.json()) as CloudinaryListResponse;
  return images;
};

const imagesLowDef = await getImagesFromCloudinary(gallery, 200);
const imagesHighDefTablet = await getImagesFromCloudinary(gallery, 1065);
const imagesHighDefDesktop = await getImagesFromCloudinary(gallery, 1200);

const sortingAlgorithm = (a: CloudinaryImage, b: CloudinaryImage) => {
  function imageNumber(image: CloudinaryImage): number {
    const parts = image.public_id.split('_');
    const lastPart = parts.pop();
    if (!lastPart) return 0; // or handle the error as needed
    const numberPart = lastPart.replace(/[a-zA-Z]+$/, ''); // Remove any trailing letters
    const number = parseInt(numberPart, 10);
    return isNaN(number) ? 0 : number; // Return 0 if parsing fails
  }
  const aImgNum = imageNumber(a);
  const bImgNum = imageNumber(b);
  if (aImgNum === bImgNum) {
    return a.public_id.localeCompare(b.public_id); // i.e. for postcards, sort by the full key
  }
  return aImgNum - bImgNum;
};

const sortedImagesLowDef = imagesLowDef.resources.sort((a, b) =>
  sortingAlgorithm(a, b)
);
const sortedImagesHighDefTablet = imagesHighDefTablet.resources.sort((a, b) =>
  sortingAlgorithm(a, b)
);
const sortedImagesHighDefDesktop = imagesHighDefDesktop.resources.sort((a, b) =>
  sortingAlgorithm(a, b)
);
---

<Layout>
  {
    sortedImagesLowDef.length > 0 && (
      <Gallery
        client:only='vue'
        imagesLowDef={sortedImagesLowDef}
        imagesHighDefTablet={sortedImagesHighDefTablet}
        imagesHighDefDesktop={sortedImagesHighDefDesktop}
      />
    )
  }
</Layout>
