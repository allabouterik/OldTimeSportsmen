---
import Layout from '@/layouts/Layout.astro';
import Gallery from '@/components/Gallery.vue';
import * as galleryPostcardsContent from '@/content/gallery-postcards.md';
import {
  getImageId,
  getImageNumber,
  getImageTitle,
  isPostcardBackImg,
  type CloudinaryImageWithCaption,
} from '@/utils/cloudinaryUtils';
import type {
  CloudinaryImage,
  CloudinaryListResponse,
} from '@/types/CloudinaryTypes';

export const prerender = true;

export const getStaticPaths = async () => {
  return [
    { params: { gallery: 'gallery/camp-cabin/camp-cabin' } },
    { params: { gallery: 'gallery/camp-cabin/hunting-groups' } },
    { params: { gallery: 'gallery/camp-cabin/fishing-groups' } },
    { params: { gallery: 'gallery/camp-cabin/scenic' } },
    { params: { gallery: 'gallery/fishing/bass' } },
    { params: { gallery: 'gallery/fishing/carp' } },
    { params: { gallery: 'gallery/fishing/catfish' } },
    { params: { gallery: 'gallery/fishing/florida-studio' } },
    { params: { gallery: 'gallery/fishing/giant-sea-bass' } },
    { params: { gallery: 'gallery/fishing/halibut' } },
    { params: { gallery: 'gallery/fishing/other-fish' } },
    { params: { gallery: 'gallery/fishing/pike-muskie' } },
    { params: { gallery: 'gallery/fishing/stringers' } },
    { params: { gallery: 'gallery/fishing/sturgeon' } },
    { params: { gallery: 'gallery/fishing/tarpon' } },
    { params: { gallery: 'gallery/fishing/trout-salmon' } },
    { params: { gallery: 'gallery/fishing/women-fishing' } },
    { params: { gallery: 'gallery/fishing/young-fishermen' } },
    { params: { gallery: 'gallery/hunting/big-game/alligators' } },
    { params: { gallery: 'gallery/hunting/big-game/bears' } },
    { params: { gallery: 'gallery/hunting/big-game/cats' } },
    { params: { gallery: 'gallery/hunting/big-game/deer' } },
    { params: { gallery: 'gallery/hunting/big-game/moose-sheep-etc' } },
    { params: { gallery: 'gallery/hunting/big-game/wolves-coyotes' } },
    { params: { gallery: 'gallery/hunting/birds/ducks' } },
    { params: { gallery: 'gallery/hunting/birds/geese' } },
    { params: { gallery: 'gallery/hunting/birds/upland-game-birds' } },
    { params: { gallery: 'gallery/hunting/birds/other-birds' } },
    { params: { gallery: 'gallery/hunting/huntin-gals' } },
    { params: { gallery: 'gallery/hunting/portraits' } },
    { params: { gallery: 'gallery/hunting/small-game/rabbits' } },
    { params: { gallery: 'gallery/hunting/small-game/rabbit-round-ups' } },
    { params: { gallery: 'gallery/hunting/small-game/squirrels-skunks-etc' } },
    { params: { gallery: 'gallery/hunting/small-game/frogs-snakes-etc' } },
    { params: { gallery: 'gallery/hunting/small-game/foxes' } },
    { params: { gallery: 'gallery/hunting/young-hunters' } },
    { params: { gallery: 'gallery/hunting/huntin-dogs' } },
    { params: { gallery: 'gallery/tall-tales/fakes' } },
    { params: { gallery: 'gallery/tall-tales/fishing' } },
    { params: { gallery: 'gallery/tall-tales/hunting' } },
  ];
};

const { gallery } = Astro.params;

const galleryParent = gallery.split('/')[1];

const getImagesFromCloudinary = async (gallery: string, size: number) => {
  const listName =
    gallery.replace('gallery/', '').replaceAll('/', '_') + '_' + size;
  const imagesJson = await fetch(
    `https://res.cloudinary.com/all-about-erik/image/list/${listName}.json`
  );
  if (!imagesJson.ok) {
    console.error('Failed to fetch images from Cloudinary', gallery, size);
    return { resources: [] };
  }
  const images = (await imagesJson.json()) as CloudinaryListResponse;
  return images;
};

const imagesLowDef = await getImagesFromCloudinary(gallery, 200);
const imagesHighDefTablet = await getImagesFromCloudinary(gallery, 1065);
const imagesHighDefDesktop = await getImagesFromCloudinary(gallery, 1200);

const sortingAlgorithm = (a: CloudinaryImage, b: CloudinaryImage) => {
  const aImgNum = getImageNumber(a);
  const bImgNum = getImageNumber(b);
  if (aImgNum === bImgNum) {
    return a.public_id.localeCompare(b.public_id); // i.e. for postcards, sort by the full key
  }
  return aImgNum - bImgNum;
};

let sortedImagesLowDef = imagesLowDef.resources.sort((a, b) =>
  sortingAlgorithm(a, b)
) as CloudinaryImageWithCaption[];
let sortedImagesHighDefTablet = imagesHighDefTablet.resources.sort((a, b) =>
  sortingAlgorithm(a, b)
) as CloudinaryImageWithCaption[];
let sortedImagesHighDefDesktop = imagesHighDefDesktop.resources.sort((a, b) =>
  sortingAlgorithm(a, b)
) as CloudinaryImageWithCaption[];

const { frontmatter: postcardsContent } = galleryPostcardsContent;

export type PostcardContent = {
  id: string;
  postmark?: string;
  mainText?: string;
};

const getPostcardContent = (image: CloudinaryImageWithCaption) => {
  const imageId = getImageId(image);
  return postcardsContent.postcards[galleryParent]?.find(
    // Find the postcard content by matching the image ID
    // Checks also if the postcard id does not contain a leading zero
    // as some postcards have IDs like "01", "02", etc.
    (postcard: PostcardContent) => postcard.id === imageId || postcard.id === imageId.replace(/^0+/, '')
  );
};

const processImages = (images: CloudinaryImageWithCaption[]) => {
  return images.map((image) => {
    if (isPostcardBackImg(image.public_id)) {
      const postcardData = getPostcardContent(image);
      if (postcardData) {
        return {
          ...image,
          postmark: postcardData.postmark,
          mainText: postcardData.mainText,
        };
      } else {
        console.warn(
          `Postcard data not found for public_id: ${image.public_id}`
        );
      }
    }
    return image;
  });
};

sortedImagesLowDef = processImages(sortedImagesLowDef);
sortedImagesHighDefTablet = processImages(sortedImagesHighDefTablet);
sortedImagesHighDefDesktop = processImages(sortedImagesHighDefDesktop);
---

<Layout>
  {
    sortedImagesLowDef.length > 0 && (
      <Gallery
        client:only='vue'
        imagesLowDef={sortedImagesLowDef}
        imagesHighDefTablet={sortedImagesHighDefTablet}
        imagesHighDefDesktop={sortedImagesHighDefDesktop}
      />
    )
  }
</Layout>
